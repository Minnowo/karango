package pages

import(
"karango/components"
) 


templ EntryPage(view *EntryView) {

    <head>
        @components.HeadMetaData()
        @components.IncludeMainCSS()

  @templ.JSONScript("food-data", view.Foods)
   <script>
       // foodData = [{"FoodID":1,"Food":"tim bar","Portion":1,"Unit":"bar","Protein":6,"Carb":22,"Fibre":4,"Fat":15}]
        const foodData = JSON.parse(document.getElementById('food-data').textContent);
   </script>

    </head>

    <body class="flex flex-1">

    <div class="flex-col mx-auto p-8 rounded-lg mt-10">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Blood Sugar and Insulin Tracker</h2>
        
        <form action="#" method="POST" class="space-y-6">
            <!-- Date-Time Input -->
            <div>
                <label for="date-time" class="block text-sm font-semibold text-gray-700">Date and Time</label>
                <input type="datetime-local" value={ view.Time.Format(HTML_TIME_FMT) } id="date-time" name="date-time" class="mt-2 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <!-- Blood Glucose Level -->
            <div>
                <label for="blood-glucose" class="block text-sm font-semibold text-gray-700">Blood Glucose Level (mg/dL)</label>
                <input 
                type="number" 
                id="blood-glucose" 
                name="blood-glucose" 
                step={ FmtFloat(view.BGLIncrement) } 
                value={ FmtFloat(view.BGL) } 
                class="mt-2 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <!-- Insulin to Carb Ratio -->
            <div>
                <label for="insulin-carb-ratio" class="block text-sm font-semibold text-gray-700">Insulin to Carb Ratio</label>
                <input  
                type="number" 
                id="insulin-carb-ratio" 
                name="insulin-carb-ratio" 
                step={ FmtFloat(view.ITCRIncrement) } 
                value={ FmtFloat(view.ITCR) } 
                class="mt-2 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <!-- Actual Taken Insulin -->
            <div>
                <label for="actual-insulin" class="block text-sm font-semibold text-gray-700">Actual Insulin Taken (units)</label>
                <input 
                type="number" 
                id="actual-insulin" 
                name="actual-insulin" 
                step={ FmtFloat(view.AITIncrement) } 
                value={ FmtFloat(view.AIT) } 
                class="mt-2 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <!-- Recommended Insulin Amount -->
            <div>
                <label for="recommended-insulin" class="block text-sm font-semibold text-gray-700">Recommended Insulin Amount (units)</label>
                <input 
                type="number" 
                id="recommended-insulin" 
                name="recommended-insulin" 
                step={ FmtFloat(view.RIAIncrement) } 
                value={ FmtFloat(view.RIA) } 
                class="mt-2 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <!-- Food Dropdown -->
            <div class="w-full flex-col">

                <div class="flex flex-row items-center">
                    <label class="mx-2">Food Information</label>
                    <label class="mx-auto  items-center" id="total-carbs">Total Net Carbs: 22</label>
                    <button class="mx-2 border-c-black" type="button" onclick="addRow()">Add Row</button>
                </div>
                <table id="food-table" class="table-auto max-w-full mt-2">
                    <thead>
                        <tr>
                            <th class="py-2 text-sm">Food</th>
                            <th class="py-2 text-sm">Unit</th>
                            <th class="py-2 text-sm">Amt</th>
                            <th class="py-2 text-sm max-sm:hidden">P</th>
                            <th class="py-2 text-sm max-sm:hidden">C</th>
                            <th class="py-2 text-sm max-sm:hidden">Fbr</th>
                            <th class="py-2 text-sm max-sm:hidden">Fat</th>
                            <th class="py-2 text-sm">NC</th>
                            <th class="py-2 text-sm">X</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end">
                <button type="submit" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">Submit</button>
            </div>
        </form>
    </div>

    <script>

        var RowID = 0;
        const foodTable = document.getElementById('food-table');
        const totalCarbLabel = document.getElementById("total-carbs");
        // this is creating a key/value pair dictionary to store UI state
        const state = {
            rows: {}
        };

        function getNetCarbs(){

            const numberInputs = Object.entries(state.rows).map((r) => r[1][7]);

            if (!numberInputs) {
                return 0;
            }

            const totalNetCarbs = numberInputs
                .map(input => parseFloat(input.value) || 0)
                .reduce((sum, value) => sum + value, 0);

            return totalNetCarbs;
        }
        function updateTotalNetCarbs() {

            const totalNetCarbs = getNetCarbs();
            totalCarbLabel.textContent = `Total Carbs: ${totalNetCarbs}`
        }

        function addRow() {

            const rowID = RowID++;
            const rows = new Array(9);
            state.rows[rowID] = rows;

            const foodSelect = raw.select(
                "w-full",
                () => foodData.map((f) => raw.option({ value: f.FoodID }, new Text(f.Food)))
            )
            rows[0] = foodSelect;

            const unitSelect = raw.select(
                "w-full min-w-max",
                () => [
                    { i: "g", t: "gram" },
                    { i: "cup", t: "cup" },
                    { i: "ounce", t: "ounce" },
                ].map((u) => raw.option({ value: u.i }, new Text(u.t)))
            );
            rows[1] = unitSelect;

            const portionInput = raw.input(
                "w-full",
                {
                    type: "number",
                    min: "1",
                    value: "1"
                },
            )
            rows[2] = portionInput;

            const proteinInput = raw.input(
                "w-full",
                {
                    type: "number",
                    step: "0.1",
                }
            );
            rows[3] = raw.td( "max-sm:hidden", proteinInput);

            const carbInput = raw.input(
                "w-full",
                {
                    type: "number",
                    step: "0.1",
                }
            );
            rows[4] = raw.td( "max-sm:hidden", carbInput);

            const fibreInput = raw.input(
                "w-full",
                {
                    type: "number",
                    step: "0.1",
                }
            );
            rows[5] = raw.td( "max-sm:hidden", fibreInput);

            const fatInput = raw.input(
                "w-full",
                {
                    type: "number",
                    step: "0.1",
                }
            );
            rows[6] = raw.td( "max-sm:hidden", fatInput);

            const netCarbsInput = raw.input(
                "w-full",
                {
                    type: "number",
                    step: "0.1",
                    "data": {id:"net-carbs-input"},
                }
            );
            rows[7] = netCarbsInput;

            const row = foodTable.insertRow();
            rows[8] = raw.button(
                    "w-full bg-c-red px-2",
                    new Text("X"),
                    raw.on("click", () => {
                        delete state.rows[rowID];
                        row.remove();
                        updateTotalNetCarbs();
                        })
            );

            for(var i = 0; i < rows.length; i++){
                row.insertCell(i).append(rows[i]);
            }

            const updateRowData = () => {
                const selectedFood = foodData.find(food => food.FoodID == foodSelect.value);
                if (selectedFood) {
                    const portionFactor = portionInput.value / selectedFood.Portion;
                    proteinInput.value = (selectedFood.Protein * portionFactor).toFixed(1);
                    carbInput.value = (selectedFood.Carb * portionFactor).toFixed(1);
                    fibreInput.value = (selectedFood.Fibre * portionFactor).toFixed(1);
                    fatInput.value = (selectedFood.Fat * portionFactor).toFixed(1);
                    netCarbsInput.value = ((selectedFood.Carb - selectedFood.Fibre) * portionFactor).toFixed(1);
                    updateTotalNetCarbs();
                }
            };

            foodSelect.addEventListener('change', updateRowData);
            portionInput.addEventListener('input', updateRowData);
            netCarbsInput.addEventListener('input', updateTotalNetCarbs)

            updateRowData();
        }

        addRow();

    </script>

    </body>

}
